/*
 * This file is generated by jOOQ.
*/
package qooj.jooq.generate.tables;


import java.math.BigDecimal;
import java.sql.Date;
import java.sql.Time;
import java.sql.Timestamp;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.TableImpl;

import qooj.jooq.generate.Qooj;
import qooj.jooq.generate.tables.records.Test1Record;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Test1 extends TableImpl<Test1Record> {

    private static final long serialVersionUID = -156448298;

    /**
     * The reference instance of <code>qooj.test1</code>
     */
    public static final Test1 TEST1 = new Test1();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Test1Record> getRecordType() {
        return Test1Record.class;
    }

    /**
     * The column <code>qooj.test1.code</code>.
     */
    public final TableField<Test1Record, BigDecimal> CODE = createField("code", org.jooq.impl.SQLDataType.DECIMAL, this, "");

    /**
     * The column <code>qooj.test1.name</code>.
     */
    public final TableField<Test1Record, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR.length(10), this, "");

    /**
     * The column <code>qooj.test1.date1</code>.
     */
    public final TableField<Test1Record, Date> DATE1 = createField("date1", org.jooq.impl.SQLDataType.DATE, this, "");

    /**
     * The column <code>qooj.test1.date2</code>.
     */
    public final TableField<Test1Record, Timestamp> DATE2 = createField("date2", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>qooj.test1.time1</code>.
     */
    public final TableField<Test1Record, Time> TIME1 = createField("time1", org.jooq.impl.SQLDataType.TIME, this, "");

    /**
     * Create a <code>qooj.test1</code> table reference
     */
    public Test1() {
        this("test1", null);
    }

    /**
     * Create an aliased <code>qooj.test1</code> table reference
     */
    public Test1(String alias) {
        this(alias, TEST1);
    }

    private Test1(String alias, Table<Test1Record> aliased) {
        this(alias, aliased, null);
    }

    private Test1(String alias, Table<Test1Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Qooj.QOOJ;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Test1 as(String alias) {
        return new Test1(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Test1 rename(String name) {
        return new Test1(name, null);
    }
}
